import { cancelTemplateString } from './cancelTemplateString';
import { addStyleScopeIdToElement } from './addStyleScopeId';
import { minify, Options } from 'html-minifier-terser';
import { HTMLElement } from './node-html-parser';

const MINIFIER_OPTIONS: Options = {
  caseSensitive: true,
  collapseInlineTagWhitespace: false,
  conservativeCollapse: true,
  collapseWhitespace: true,
  continueOnParseError: true,
  html5: true,
  includeAutoGeneratedTags: false,
  noNewlinesBeforeTagClose: true,
  preserveLineBreaks: false,
  removeAttributeQuotes: true,
  removeComments: true
};

interface ViewData {
  name: string;
  element: HTMLElement;
  instructions: string[];
}

function createView(name: string, element: HTMLElement): ViewData {
  return { name, element, instructions: [] };
}

async function compileView(view: ViewData, styleScopeId: string) {
  // addStyleScopeIdToElement(view.element, styleScopeId);
  const htmlCode = await minify(view.element.outerHTML, MINIFIER_OPTIONS);

  // prettier-ignore
  return `const ${view.name}View = u.view('${styleScopeId}', \`${cancelTemplateString(htmlCode)}\`, (e, $) => [${view.instructions.join(',')}]);`;
}

export { compileView, createView, ViewData };
